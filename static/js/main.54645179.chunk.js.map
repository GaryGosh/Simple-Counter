{"version":3,"sources":["component/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","count","color","randomColor","increment","setState","decrement","textColor","this","style","onClick","Component","App","className","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAIqBA,G,kNAEjBC,MAAQ,CACJC,MAAO,EACPC,MAAOC,O,EAGXC,UAAY,WACR,EAAKC,SAAS,CACVJ,MAAO,EAAKD,MAAMC,MAAQ,EAC1BC,MAAOC,S,EAIfG,UAAY,WACR,EAAKD,SAAS,CACVJ,MAAO,EAAKD,MAAMC,MAAQ,EAC1BC,MAAOC,S,uDAKb,IAAMI,EAAY,CAACL,MAAOM,KAAKR,MAAME,OACvC,OACE,6BACE,wBAAIO,MAAOF,GAAYC,KAAKR,MAAMC,OAClC,4BAAQS,QAASF,KAAKJ,WAAtB,aACA,4BAAQM,QAASF,KAAKF,WAAtB,kB,GA3B6BK,cCDhBC,E,uKAKjB,OACE,yBAAKC,UAAU,OACb,wBAAIJ,MAAO,CAACP,MAAO,QAASY,SAAU,QAAtC,kBACA,kBAAC,EAAD,W,GARyBH,aCSbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.54645179.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport randomColor from \"randomcolor\";\r\nimport \"./Counter.css\"\r\n\r\nexport default class Counter extends Component {\r\n\r\n    state = {\r\n        count: 0,\r\n        color: randomColor()\r\n    };\r\n\r\n    increment = () => {\r\n        this.setState({\r\n            count: this.state.count + 1,\r\n            color: randomColor()\r\n        })\r\n    };\r\n\r\n    decrement = () => {\r\n        this.setState({\r\n            count: this.state.count - 1,\r\n            color: randomColor()\r\n        })\r\n    }\r\n\r\n  render() {\r\n      const textColor = {color: this.state.color};\r\n    return (\r\n      <div>\r\n        <h4 style={textColor}>{this.state.count}</h4>\r\n        <button onClick={this.increment}>Increment</button>\r\n        <button onClick={this.decrement}>Decrement</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Counter from \"./component/Counter\";\nexport default class App extends Component {\n  \n  \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <h2 style={{color: 'white', fontSize: '3em'}}>Simple Counter</h2>\n        <Counter/>\n        \n        \n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}